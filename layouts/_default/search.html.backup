{{- define "main" }}

<style>
  .search-container {
    max-width: 900px;
    margin: 0 auto;
    padding: 40px 20px;
  }

  .search-header {
    text-align: center;
    margin-bottom: 40px;
  }

  .search-header h1 {
    font-size: 2.5rem;
    margin: 0 0 15px 0;
    font-weight: 700;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .search-header p {
    color: #666;
    font-size: 1rem;
  }

  .search-box-wrapper {
    position: relative;
    margin-bottom: 40px;
  }

  .search-input {
    width: 100%;
    padding: 16px 20px;
    font-size: 1rem;
    border: 2px solid #ddd;
    border-radius: 12px;
    outline: none;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }

  .search-input:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .search-input::placeholder {
    color: #999;
  }

  .search-icon {
    position: absolute;
    right: 16px;
    top: 50%;
    transform: translateY(-50%);
    color: #999;
    font-size: 1.2rem;
    pointer-events: none;
  }

  .search-results {
    margin-top: 40px;
  }

  .search-results-info {
    font-size: 0.95rem;
    color: #666;
    margin-bottom: 20px;
    padding: 12px;
    background: rgba(102, 126, 234, 0.05);
    border-radius: 8px;
  }

  .search-results-info strong {
    color: #667eea;
    font-weight: 600;
  }

  .result-item {
    padding: 20px;
    background: var(--entry);
    border-radius: 12px;
    border-left: 4px solid #667eea;
    margin-bottom: 16px;
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .result-item:hover {
    transform: translateX(5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .result-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 8px 0;
  }

  .result-title a {
    text-decoration: none;
    color: var(--primary);
  }

  .result-title a:hover {
    color: #667eea;
  }

  .result-description {
    color: var(--secondary);
    font-size: 0.95rem;
    margin-bottom: 10px;
    line-height: 1.6;
  }

  .result-snippet {
    background: var(--code-bg);
    padding: 12px;
    border-radius: 6px;
    font-size: 0.9rem;
    color: var(--content);
    margin-bottom: 12px;
    border-left: 3px solid #667eea;
    font-style: italic;
    line-height: 1.5;
  }

  .result-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 10px;
    font-size: 0.85rem;
    color: var(--secondary);
  }

  .result-date {
    display: flex;
    align-items: center;
    gap: 5px;
  }

  .result-tags {
    display: flex;
    gap: 6px;
    flex-wrap: wrap;
  }

  .result-tag {
    background: #667eea;
    color: white;
    padding: 3px 10px;
    border-radius: 12px;
    text-decoration: none;
    font-size: 0.8rem;
    transition: background 0.2s;
  }

  .result-tag:hover {
    background: #764ba2;
  }

  .empty-state {
    text-align: center;
    padding: 60px 20px;
    color: var(--secondary);
  }

  .empty-state-icon {
    font-size: 4rem;
    margin-bottom: 20px;
    opacity: 0.5;
  }

  .no-results {
    text-align: center;
    padding: 60px 20px;
  }

  .no-results-icon {
    font-size: 4rem;
    margin-bottom: 20px;
    opacity: 0.5;
  }

  .no-results h2 {
    color: var(--primary);
    margin: 20px 0 10px 0;
  }

  .no-results p {
    color: var(--secondary);
  }

  .loading {
    text-align: center;
    padding: 40px 20px;
    color: var(--secondary);
  }

  .loading-spinner {
    display: inline-block;
    width: 40px;
    height: 40px;
    border: 4px solid var(--border);
    border-top: 4px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 15px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .error-state {
    text-align: center;
    padding: 40px 20px;
    color: #e74c3c;
  }

  .error-details {
    background: #fee;
    padding: 15px;
    border-radius: 8px;
    margin-top: 15px;
    font-size: 0.9rem;
    color: #c0392b;
    text-align: left;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  @media (max-width: 768px) {
    .search-header h1 {
      font-size: 2rem;
    }

    .search-container {
      padding: 20px 15px;
    }

    .result-meta {
      flex-direction: column;
      align-items: flex-start;
    }

    .result-item {
      padding: 15px;
    }
  }
</style>

<div class="search-container">
  <div class="search-header">
    <h1>üîç Search Documentation</h1>
    <p>Full-text search with fuzzy matching powered by Fuse.js</p>
  </div>

  <div class="search-box-wrapper">
    <input 
      type="text" 
      id="searchInput" 
      class="search-input" 
      placeholder="Search documentation... (try 'bash', 'tutorial', 'guide')"
      autocomplete="off"
      autofocus
    >
    <span class="search-icon">üîé</span>
  </div>

  <div id="loadingState" class="loading" style="display: none;">
    <div class="loading-spinner"></div>
    <p>Loading search index...</p>
  </div>

  <div id="searchResults" class="search-results"></div>

  <div id="emptyState" class="empty-state">
    <div class="empty-state-icon">üìö</div>
    <p>Enter a search term to find documentation</p>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/fuse.js@7.0.0/dist/fuse.min.js"></script>
<script>
(function() {
  let searchIndex = [];
  let fuse = null;
  const BASE_URL = '{{ .Site.BaseURL }}';

  // Normalize URL - ensure it ends with /
  function normalizeURL(url) {
    return url.endsWith('/') ? url : url + '/';
  }

  // Fetch search index
  async function loadSearchIndex() {
    const loadingState = document.getElementById('loadingState');
    const emptyState = document.getElementById('emptyState');
    
    loadingState.style.display = 'block';
    emptyState.style.display = 'none';
    
    try {
      const baseURL = normalizeURL(BASE_URL);
      const indexPath = baseURL + 'index.json';
      
      console.log('Loading search index from:', indexPath);
      
      const response = await fetch(indexPath);
      
      if (!response.ok) {
        throw new Error(`Failed to load search index (HTTP ${response.status})`);
      }
      
      const data = await response.json();
      console.log('‚úì Raw data received:', data.length, 'items');
      
      // Filter and validate entries
      searchIndex = Array.isArray(data) 
        ? data.filter(item => item && item.title && item.content)
        : [];

      searchIndex = searchIndex.map(item => ({
        title: String(item.title || ''),
        content: String(item.content || ''),
        description: String(item.description || ''),
        url: String(item.url || ''),
        tags: Array.isArray(item.tags) ? item.tags.filter(t => t) : [],
        date: String(item.date || ''),
        section: String(item.section || '')
      }));

      console.log('‚úì Search index processed:', searchIndex.length, 'valid documents');

      if (searchIndex.length === 0) {
        loadingState.style.display = 'none';
        emptyState.innerHTML = `
          <div class="empty-state-icon">‚ö†Ô∏è</div>
          <h3>No documents found</h3>
          <p>Add markdown files to content/docs/ and rebuild the site</p>
        `;
        emptyState.style.display = 'block';
        return;
      }

      // Initialize Fuse.js
      fuse = new Fuse(searchIndex, {
        keys: [
          { name: 'title', weight: 0.4 },
          { name: 'description', weight: 0.3 },
          { name: 'content', weight: 0.2 },
          { name: 'tags', weight: 0.1 }
        ],
        includeScore: true,
        includeMatches: true,
        threshold: 0.4,
        minMatchCharLength: 2,
        ignoreLocation: true,
        useExtendedSearch: false
      });

      loadingState.style.display = 'none';
      emptyState.style.display = 'block';
      console.log('‚úì Search ready! Index has', searchIndex.length, 'documents');
      
      // Auto-search if query in URL
      const urlParams = new URLSearchParams(window.location.search);
      const query = urlParams.get('q');
      if (query) {
        document.getElementById('searchInput').value = query;
        performSearch(query);
      }
      
    } catch (error) {
      console.error('‚úó Error loading search index:', error);
      loadingState.innerHTML = `
        <div class="error-state">
          <div class="empty-state-icon">‚ùå</div>
          <h3>Failed to load search index</h3>
          <div class="error-details">
            <strong>Error:</strong> ${error.message}<br><br>
            <strong>Troubleshooting:</strong><br>
            1. Make sure Hugo server is running<br>
            2. Check that index.json is generated at ${BASE_URL}index.json<br>
            3. Verify content/docs/ has markdown files<br>
            4. Try rebuilding: <code>hugo server --disableFastRender</code>
          </div>
        </div>
      `;
    }
  }

  // Get contextual snippet
  function getSnippet(content, query, length = 200) {
    if (!content) return '';
    
    const lowerContent = content.toLowerCase();
    const lowerQuery = query.toLowerCase();
    const index = lowerContent.indexOf(lowerQuery);
    
    if (index === -1) {
      // No match found, return beginning
      return content.substring(0, length) + (content.length > length ? '...' : '');
    }
    
    // Show context around match
    const start = Math.max(0, index - 60);
    const end = Math.min(content.length, index + query.length + 140);
    
    let snippet = content.substring(start, end);
    if (start > 0) snippet = '...' + snippet;
    if (end < content.length) snippet = snippet + '...';
    
    return snippet;
  }

  // Format date nicely
  function formatDate(dateString) {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
    } catch {
      return dateString;
    }
  }

  // Perform search
  function performSearch(query) {
    const resultsContainer = document.getElementById('searchResults');
    const emptyState = document.getElementById('emptyState');
    
    resultsContainer.innerHTML = '';

    if (!query || !query.trim()) {
      emptyState.innerHTML = `
        <div class="empty-state-icon">üìö</div>
        <p>Enter a search term to find documentation</p>
      `;
      emptyState.style.display = 'block';
      return;
    }

    emptyState.style.display = 'none';

    if (!fuse || searchIndex.length === 0) {
      resultsContainer.innerHTML = '<p class="loading">‚è≥ Search index not ready. Please wait...</p>';
      return;
    }

    const results = fuse.search(query).slice(0, 50);

    if (results.length === 0) {
      resultsContainer.innerHTML = `
        <div class="no-results">
          <div class="no-results-icon">üîç</div>
          <h2>No results found</h2>
          <p>Try different keywords or browse by <a href="${BASE_URL}tags/">tags</a></p>
        </div>
      `;
      return;
    }

    // Results info
    const resultsInfo = document.createElement('div');
    resultsInfo.className = 'search-results-info';
    resultsInfo.innerHTML = `
      Found <strong>${results.length}</strong> result${results.length !== 1 ? 's' : ''} 
      for <strong>"${query}"</strong>
    `;
    resultsContainer.appendChild(resultsInfo);

    // Display results
    results.forEach((result, idx) => {
      const item = result.item;
      const snippet = getSnippet(item.content, query, 250);
      
      const resultElement = document.createElement('div');
      resultElement.className = 'result-item';
      
      let tagsHtml = '';
      if (item.tags && item.tags.length > 0) {
        const baseURL = normalizeURL(BASE_URL);
        tagsHtml = item.tags.slice(0, 5).map(tag => {
          const tagSlug = tag.toLowerCase().replace(/\s+/g, '-');
          return `<a href="${baseURL}tags/${tagSlug}/" class="result-tag">${tag}</a>`;
        }).join('');
      }

      resultElement.innerHTML = `
        <div class="result-title">
          <a href="${item.url}">${item.title}</a>
        </div>
        ${item.description ? `<div class="result-description">${item.description}</div>` : ''}
        ${snippet ? `<div class="result-snippet">${snippet}</div>` : ''}
        <div class="result-meta">
          <div class="result-date">üìÖ ${formatDate(item.date)}</div>
          ${tagsHtml ? `<div class="result-tags">${tagsHtml}</div>` : ''}
        </div>
      `;
      
      resultsContainer.appendChild(resultElement);
    });
  }

  // Event listeners
  const searchInput = document.getElementById('searchInput');
  
  searchInput.addEventListener('input', (e) => {
    performSearch(e.target.value);
  });

  searchInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      performSearch(e.target.value);
    }
  });

  // Load on page ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadSearchIndex);
  } else {
    loadSearchIndex();
  }
})();
</script>

{{- end }}
